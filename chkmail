#!/bin/bash

# Check for configuration
if [ -z $1 ]; then
	echo -ne "Sorry, you must specify the configuration location\n"
	exit 1
else
	# Make sure the conf file exists
	if [ -s $1 ]; then
		# Get configuration
		source $1
	else
		echo -ne "Config $1 not found.\n"
		exit 1
	fi
fi

# Set the default exit status to failure (non-zero)
EXIT_STATUS=1

echo -e "($($DATEFMT)) Starting\n" >> $LOGFILE

echo -e "(i$($DATEFMT)) Sending test email\n" >> $LOGFILE

function echomail {
echo -ne "helo ${HOSTNAME}\r\n"
echo -ne "ehlo ${HOSTNAME}\r\n"
echo -ne "auth plain\r\n"
echo -ne "${CREDS}\r\n"
echo -ne "mail from: <${MAILFROM}>\r\n"
echo -ne "rcpt to: <${MAILTO}>\r\n"
echo -ne "data\r\n"
sleep 2 
echo -ne "Content-type: text/html\r\n"
echo -ne "From: <${MAILFROM}>\r\n"
echo -ne "To: <${MAILTO}>\r\n"
echo -ne "Subject: MAILCHK\r\n"
echo -ne "\r\n"
echo -ne ${emailHTMLStr//\\n/$newline}"\r\n"
echo -ne "\012.\012" 
echo -ne "quit"
sleep 5
} 
# for starttls:
echomail | openssl s_client -starttls smtp -crlf -connect $MAILSERVER:$MAILPORT
# for unencrypted:
###echomail | telnet $MAILSERVER $MAILPORT

# Check for error from from openssl above
if [ ${PIPESTATUS[1]} -ne 0 ]; then
	# Got an error
	echo -e "($($DATEFMT)) Status: openssl has failed to send mail!\n" >> $LOGFILE

	# Exit with non-zero status
	exit 1
fi

echo -e "($($DATEFMT)) Test email sent\n" >> $LOGFILE

# We'll try up to 3 times to get an email before failing
for num in {1..3} 
do
	echo -e "($($DATEFMT)) attempt number $num\n" >> $LOGFILE
	# Check each files in $MAIL
	for file in $( ls -1 $MAILDIR )
	do
		echo -e "($($DATEFMT)) Checking $file for magic header.\n" >> $LOGFILE
		# if we find CMD-MAILCHK: if not we got a bogus email
		if $( grep -Fxq MAILCHK ${file} )
		then
			echo -e "($($DATEFMT))Found email with magic header.\n" >> $LOGFILE
			EXIT_STATUS=0;
			rm -f ${file}
		else
			echo -e "($($DATEFMT)) Found SPAM.\n" >> $LOGFILE
			rm -f ${file}
		fi
	done
	# Sleep before trying again
	sleep 1m
done

# log exit status
if [ EXIT_STATUS -eq 0 ]; then
	echo -e "($($DATEFMT)) Status: email appears to be functioning normally.\n" >> $LOGFILE
else
	echo -e "($($DATEFMT)) Status: email appears to be broken.\n" $LOGFILE
fi

echo -e "Ending time: $($DATEFMT)\n" >> $LOGFILE

# Exit with the last known status (either failure from the beginning 
# or success from the above loop)
exit $EXIT_STATUS

