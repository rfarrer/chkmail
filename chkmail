#!/bin/bash

# Check for configuration
if [ -z $1 ]; then
	echo -ne "Sorry, you must specify the configuration location.\n"
	exit 1
else
	# Make sure the conf file exists
	if [ -s $1 ]; then
		# Get configuration
		source $1
	else
		echo -ne "Config $1 not found.\n"
		exit 1
	fi
fi

# Check that $LOGFILE exists
touch $LOGFILE
if [ ! -e $LOGFILE ]; then
	echo -ne "$LOGFILE not found.\n"
fi

# Set the default exit status to failure (non-zero)
EXIT_STATUS=1

echo "($($DATEFMT)) Status: Started" >> $LOGFILE

echo "($($DATEFMT)) Status: Sending test email" >> $LOGFILE

function echomail {
echo -ne "helo ${HOSTNAME}\r\n"
echo -ne "ehlo ${HOSTNAME}\r\n"
echo -ne "auth plain\r\n"
echo -ne "${CREDS}\r\n"
echo -ne "mail from: <${MAILFROM}>\r\n"
echo -ne "rcpt to: <${MAILTO}>\r\n"
echo -ne "data\r\n"
sleep 2 
echo -ne "Content-type: text/html\r\n"
echo -ne "From: <${MAILFROM}>\r\n"
echo -ne "To: <${MAILTO}>\r\n"
echo -ne "Subject: CHKMAIL\r\n"
echo -ne "\r\n"
echo -ne ${emailHTMLStr//\\n/$newline}"\r\n"
echo -ne "\012.\012" 
echo -ne "quit"
sleep 5
} 

# Are we sending encrypted or unencrypted?
if [ $CRYPT == "ssl" ]; then
	echo "($($DATEFMT)) Status: using TLS connection." >> $LOGFILE
	# for starttls:
	echomail | openssl s_client -crlf -connect $MAILSERVER:$MAILPORT
elif [ $CRYPT == "tls" ]; then
	echo "($($DATEFMT)) Status: using TLS connection." >> $LOGFILE
	# for starttls:
	echomail | openssl s_client -starttls smtp -crlf -connect $MAILSERVER:$MAILPORT
elif [ $CRYPT == "plain" ]; then
	echo "($($DATEFMT)) Status: using unencrypted connection." >> $LOGFILE
	# for unencrypted:
	echomail | telnet $MAILSERVER $MAILPORT
else
	echo "($($DATEFMT)) Status: unknown connection parameter $CRYPT, exiting." >> $LOGFILE
	exit 1
fi

# Check for error from from openssl above
if [ ${PIPESTATUS[1]} -ne 0 ]; then
	# Got an error
	echo "($($DATEFMT)) Status: openssl has failed to send mail!" >> $LOGFILE
	# Exit with non-zero status
	exit 1
fi

echo "($($DATEFMT)) Status: Test email sent" >> $LOGFILE

# We'll try up to 3 times to get an email before failing
for num in {1..3} 
do
	echo "($($DATEFMT)) Status: attempt number $num" >> $LOGFILE
	# Check each files in $MAIL
	for file in $MAILDIR/*
	do
		echo "($($DATEFMT)) Checking $file for magic header." >> $LOGFILE
		# if we find CHKMAIL, if not we got a bogus email
		if [ -e ${file} ]; then
			grep -q CHKMAIL ${file}
			if [ $? == 0 ]; then
				echo "($($DATEFMT)) Status: Found email with magic header." >> $LOGFILE
				EXIT_STATUS=0
				rm -f ${file}
			else
				echo "($($DATEFMT)) Status: Found SPAM." >> $LOGFILE
				rm -f "$file"
			fi
		fi
	done
	# Sleep before trying again if no mail found otherwise continue on
	if [ $num -gt 1 ] && [ $EXIT_STATUS != 0 ]; then
		sleep 1m
	else
		break
	fi
done

# log exit status
if [ $EXIT_STATUS == 0 ]; then
	echo "($($DATEFMT)) Status: email appears to be functioning normally." >> $LOGFILE
else
	echo "($($DATEFMT)) Status: email appears to be broken." >> $LOGFILE
fi

echo "($($DATEFMT)) Status: Ended" >> $LOGFILE

# Exit with the last known status (either failure from the beginning 
# or success from the above loop)
exit $EXIT_STATUS

